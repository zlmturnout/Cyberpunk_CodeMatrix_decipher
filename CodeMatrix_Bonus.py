#!/usr/bin/python
# -*- coding: UTF-8 -*-

# CodeMatrix library for decipher


def code_matrix_puzzle(n:int):
    """
    CodeMatrix and bonus sequences for decipher
    :param n: choose one in the library
    :return:
    """
    CodeMatrix=list()
    Bonus_squence=list()
    # each code Matrix pair with specific Bonus sequences
    # the codes now in hexadecimal form, 'BD' is changed '0xbd'
    # one
    CodeMatrix.append([[0x1c,0xe9,0x1c,0x1c,0xe9],
                       [0xbd,0xbd,0x1c,0xe9,0xe9],
                       [0xbd,0xe9,0x1c,0xe9,0xe9],
                       [0xbd,0x1c,0xe9,0x55,0x55],
                       [0xbd,0x1c,0xe9,0xbd,0xe9]])
    Bonus_squence.append([[0xe9, 0xbd, 0xbd],
                          [0xe9, 0x1c, 0x1c],
                          [0x1c, 0xbd, 0xe9]])
    # two
    CodeMatrix.append([[0x7a, 0x55, 0x55, 0x55, 0x7a, 0xbd],
                       [0x1c, 0x55, 0x1c, 0x55, 0x7a, 0x1c],
                       [0xbd, 0x7a, 0x7a, 0x1c, 0x7a, 0x1c],
                       [0x7a, 0x55, 0xe9, 0xbd, 0x55, 0x7a],
                       [0x55, 0x55, 0x1c, 0xe9, 0x7a, 0x7a],
                       [0xe9, 0x1c, 0x7a, 0x7a, 0x7a, 0x7a]])
    Bonus_squence.append([[0x7a, 0x7a],
                          [0xbd, 0x1c, 0x1c],
                          [0x7a, 0x1c, 0x7a]])
    # three
    CodeMatrix.append([[0x7a, 0x55, 0xe9, 0x55, 0xe9, 0x55],
                       [0x7a, 0xe9, 0xbd, 0x1c, 0x1c, 0x1c],
                       [0xbd, 0x1c, 0x55, 0x55, 0x1c, 0xbd],
                       [0x7a, 0x7a, 0x1c, 0x55, 0x1c, 0xe9],
                       [0x7a, 0xbd, 0x7a, 0xbd, 0x1c, 0xbd],
                       [0x55, 0x7a, 0x1c, 0x55, 0x55, 0xbd]])
    Bonus_squence.append([[0x7a, 0xbd, 0x1c],
                          [0x1c, 0x7a, 0x7a, 0xbd],
                          [0xbd, 0x55, 0x1c]])
    # can add more with the puzzle encountered

    max_n=len(CodeMatrix)
    max_m=len(Bonus_squence)
    assert n < max_n & max_m == max_n
    return CodeMatrix[n],Bonus_squence[n]